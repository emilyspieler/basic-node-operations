Run the commands sort, wc and uniq on the commands.js file. Explain how they work and what the output was.

sort filename returns the file sorted alphabetically by line.

commands.evaluateCmd(userInput);
 userInput = userInput.toString().trim();
//evaluateCmd is a function which will be implemented in commands.js
process.stdin.on('data', (userInput) => {
process.stdout.write('prompt > ');
});

wc filename prints newline, word, and byte counts for a file.

11      44     372 bash.js

uniq filename sorts each line in a file and only returns different lines. If there is a line in a file that is the same as a line above it, uniq removes it from the output.

//prompt the user for input
 process.stdout.write('prompt > ');

// The stdin 'data' event triggers after a user types in a line
 process.stdin.on('data', (userInput) => {
   userInput = userInput.toString().trim();
  //evaluateCmd is a function which will be implemented in commands.js
   commands.evaluateCmd(userInput);
 });


Using the pipe (|) connect at least two commands and run it on commands.js. Explain what the output was and why the specific data was outputted.

cat bash.js | head -7 | tail -5

//prompt the user for input
 process.stdout.write('prompt > ');
// The stdin 'data' event triggers after a user types in a line
 process.stdin.on('data', (userInput) => {
   userInput = userInput.toString().trim();

This command selects first 7 lines and last 5 lines from the file and print those lines which are common to both of them.

Programming Questions:

3. head -2 bash.js
const commands = require("./commands.js");
//prompt the user for input

4. tail -3 bash.js
  //evaluateCmd is a function which will be implemented in commands.js
   commands.evaluateCmd(userInput);
 });

6.
var string = "hello"

function reverseString(inputString) {
   return inputString.split('').reverse().join('')
}

console.log(reverseString(string));
